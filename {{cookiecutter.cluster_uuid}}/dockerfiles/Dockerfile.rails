# syntax=docker/dockerfile:experimental
# https://www.firehydrant.io/blog/developing-a-ruby-on-rails-app-with-docker-compose/
# CHECK!!!!
# https://github.com/medicharlachiranjeevi/phusion-passenger-docker-rails/blob/master/Dockerfile

# https://blog.carbonfive.com/2015/03/17/docker-rails-docker-compose-together-in-your-development-workflow/

ARG RUBY_IMAGE
FROM ${RUBY_IMAGE} AS builder
# GEMS
# https://bundler.io/v2.0/guides/bundler_docker_guide.html
ARG GEM_HOME=/cache/gem
ARG NPM_CONFIG_PREFIX=/cache/npm
# build dir in the container
ARG LOCAL_ARVADOS_SRC=/arvados
ARG APP_NAME
ARG APP_DIR
ARG APP_SUBDIR=${APP_DIR}/${APP_NAME}

ENV DEBIAN_FRONTEND noninteractive
ENV BUNDLE_PATH $GEM_HOME
ENV PATH $BUNDLE_PATH/bin:$PATH
ENV PORT $PORT

# These are the ones arvbox uses
ENV GEM_HOME ${GEM_HOME}
ENV GEM_PATH ${GEM_HOME}
ENV NPM_CONFIG_PREFIX ${NPM_CONFIG_PREFIX}
ENV npm_config_cache_min ${NPM_CACHE_MIN}
# ENV R_LIBS /var/lib/Rlibs

# We use this to get the config :|
COPY --from=nmarvie/server /app/arvados-server /usr/local/bin

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked,id=cache-apt \
    --mount=type=cache,target=/var/lib/apt,sharing=locked,id=lib-apt \
    apt-get update \
 && apt-get install --yes \
                    --no-install-recommends \
                    bundler \
                    curl \
                    g++ \
                    gcc \
                    git \
                    libcurl4 \
                    libcurl4-gnutls-dev \
                    libpq-dev \
                    libxml2 \
                    libxml2-dev \
                    make \
                    npm \
                    postgresql-client \
                    python-dev \
                    ruby-dev \
                    zlib1g-dev

# copy the arvados code
COPY ./arvados/${APP_SUBDIR} ${LOCAL_ARVADOS_SRC}/${APP_SUBDIR}

WORKDIR ${LOCAL_ARVADOS_SRC}/${APP_SUBDIR}

EXPOSE ${PORT}
CMD ["rails", "server", "-b", "0.0.0.0"]
